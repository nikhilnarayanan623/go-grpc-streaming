// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/pb/streamer_grpc.pb.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	pb "stream-service/pkg/pb"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockStreamServiceClient is a mock of StreamServiceClient interface.
type MockStreamServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreamServiceClientMockRecorder
}

// MockStreamServiceClientMockRecorder is the mock recorder for MockStreamServiceClient.
type MockStreamServiceClientMockRecorder struct {
	mock *MockStreamServiceClient
}

// NewMockStreamServiceClient creates a new mock instance.
func NewMockStreamServiceClient(ctrl *gomock.Controller) *MockStreamServiceClient {
	mock := &MockStreamServiceClient{ctrl: ctrl}
	mock.recorder = &MockStreamServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamServiceClient) EXPECT() *MockStreamServiceClientMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockStreamServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (pb.StreamService_UploadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Upload", varargs...)
	ret0, _ := ret[0].(pb.StreamService_UploadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockStreamServiceClientMockRecorder) Upload(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockStreamServiceClient)(nil).Upload), varargs...)
}

// MockStreamService_UploadClient is a mock of StreamService_UploadClient interface.
type MockStreamService_UploadClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreamService_UploadClientMockRecorder
}

// MockStreamService_UploadClientMockRecorder is the mock recorder for MockStreamService_UploadClient.
type MockStreamService_UploadClientMockRecorder struct {
	mock *MockStreamService_UploadClient
}

// NewMockStreamService_UploadClient creates a new mock instance.
func NewMockStreamService_UploadClient(ctrl *gomock.Controller) *MockStreamService_UploadClient {
	mock := &MockStreamService_UploadClient{ctrl: ctrl}
	mock.recorder = &MockStreamService_UploadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamService_UploadClient) EXPECT() *MockStreamService_UploadClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockStreamService_UploadClient) CloseAndRecv() (*pb.UploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*pb.UploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockStreamService_UploadClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockStreamService_UploadClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockStreamService_UploadClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockStreamService_UploadClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockStreamService_UploadClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockStreamService_UploadClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStreamService_UploadClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStreamService_UploadClient)(nil).Context))
}

// Header mocks base method.
func (m *MockStreamService_UploadClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockStreamService_UploadClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockStreamService_UploadClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockStreamService_UploadClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStreamService_UploadClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStreamService_UploadClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockStreamService_UploadClient) Send(arg0 *pb.UploadRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockStreamService_UploadClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStreamService_UploadClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockStreamService_UploadClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStreamService_UploadClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStreamService_UploadClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockStreamService_UploadClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockStreamService_UploadClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockStreamService_UploadClient)(nil).Trailer))
}

// MockStreamServiceServer is a mock of StreamServiceServer interface.
type MockStreamServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamServiceServerMockRecorder
}

// MockStreamServiceServerMockRecorder is the mock recorder for MockStreamServiceServer.
type MockStreamServiceServerMockRecorder struct {
	mock *MockStreamServiceServer
}

// NewMockStreamServiceServer creates a new mock instance.
func NewMockStreamServiceServer(ctrl *gomock.Controller) *MockStreamServiceServer {
	mock := &MockStreamServiceServer{ctrl: ctrl}
	mock.recorder = &MockStreamServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamServiceServer) EXPECT() *MockStreamServiceServerMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockStreamServiceServer) Upload(arg0 pb.StreamService_UploadServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockStreamServiceServerMockRecorder) Upload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockStreamServiceServer)(nil).Upload), arg0)
}

// mustEmbedUnimplementedStreamServiceServer mocks base method.
func (m *MockStreamServiceServer) mustEmbedUnimplementedStreamServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStreamServiceServer")
}

// mustEmbedUnimplementedStreamServiceServer indicates an expected call of mustEmbedUnimplementedStreamServiceServer.
func (mr *MockStreamServiceServerMockRecorder) mustEmbedUnimplementedStreamServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStreamServiceServer", reflect.TypeOf((*MockStreamServiceServer)(nil).mustEmbedUnimplementedStreamServiceServer))
}

// MockUnsafeStreamServiceServer is a mock of UnsafeStreamServiceServer interface.
type MockUnsafeStreamServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeStreamServiceServerMockRecorder
}

// MockUnsafeStreamServiceServerMockRecorder is the mock recorder for MockUnsafeStreamServiceServer.
type MockUnsafeStreamServiceServerMockRecorder struct {
	mock *MockUnsafeStreamServiceServer
}

// NewMockUnsafeStreamServiceServer creates a new mock instance.
func NewMockUnsafeStreamServiceServer(ctrl *gomock.Controller) *MockUnsafeStreamServiceServer {
	mock := &MockUnsafeStreamServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeStreamServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeStreamServiceServer) EXPECT() *MockUnsafeStreamServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedStreamServiceServer mocks base method.
func (m *MockUnsafeStreamServiceServer) mustEmbedUnimplementedStreamServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStreamServiceServer")
}

// mustEmbedUnimplementedStreamServiceServer indicates an expected call of mustEmbedUnimplementedStreamServiceServer.
func (mr *MockUnsafeStreamServiceServerMockRecorder) mustEmbedUnimplementedStreamServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStreamServiceServer", reflect.TypeOf((*MockUnsafeStreamServiceServer)(nil).mustEmbedUnimplementedStreamServiceServer))
}

// MockStreamService_UploadServer is a mock of StreamService_UploadServer interface.
type MockStreamService_UploadServer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamService_UploadServerMockRecorder
}

// MockStreamService_UploadServerMockRecorder is the mock recorder for MockStreamService_UploadServer.
type MockStreamService_UploadServerMockRecorder struct {
	mock *MockStreamService_UploadServer
}

// NewMockStreamService_UploadServer creates a new mock instance.
func NewMockStreamService_UploadServer(ctrl *gomock.Controller) *MockStreamService_UploadServer {
	mock := &MockStreamService_UploadServer{ctrl: ctrl}
	mock.recorder = &MockStreamService_UploadServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamService_UploadServer) EXPECT() *MockStreamService_UploadServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockStreamService_UploadServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStreamService_UploadServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStreamService_UploadServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockStreamService_UploadServer) Recv() (*pb.UploadRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.UploadRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockStreamService_UploadServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockStreamService_UploadServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockStreamService_UploadServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStreamService_UploadServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStreamService_UploadServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockStreamService_UploadServer) SendAndClose(arg0 *pb.UploadResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockStreamService_UploadServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockStreamService_UploadServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockStreamService_UploadServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockStreamService_UploadServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockStreamService_UploadServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockStreamService_UploadServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStreamService_UploadServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStreamService_UploadServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockStreamService_UploadServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockStreamService_UploadServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockStreamService_UploadServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockStreamService_UploadServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockStreamService_UploadServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockStreamService_UploadServer)(nil).SetTrailer), arg0)
}

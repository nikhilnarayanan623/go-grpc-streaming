// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repository/interfaces/stream.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"
	domain "stream-service/pkg/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockStreamRepository is a mock of StreamRepository interface.
type MockStreamRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStreamRepositoryMockRecorder
}

// MockStreamRepositoryMockRecorder is the mock recorder for MockStreamRepository.
type MockStreamRepositoryMockRecorder struct {
	mock *MockStreamRepository
}

// NewMockStreamRepository creates a new mock instance.
func NewMockStreamRepository(ctrl *gomock.Controller) *MockStreamRepository {
	mock := &MockStreamRepository{ctrl: ctrl}
	mock.recorder = &MockStreamRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamRepository) EXPECT() *MockStreamRepositoryMockRecorder {
	return m.recorder
}

// SaveFileDetails mocks base method.
func (m *MockStreamRepository) SaveFileDetails(ctx context.Context, details domain.FileDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFileDetails", ctx, details)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFileDetails indicates an expected call of SaveFileDetails.
func (mr *MockStreamRepositoryMockRecorder) SaveFileDetails(ctx, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFileDetails", reflect.TypeOf((*MockStreamRepository)(nil).SaveFileDetails), ctx, details)
}
